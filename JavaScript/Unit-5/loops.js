// Js Loops Practice

/*  ****************
// 1. for loop 
****************** */

/* জাভাস্ক্রিপ্টের **for লুপ** একটি নির্দিষ্ট সংখ্যা বার কোড চালানোর জন্য ব্যবহৃত হয়। এটি একটি নির্দিষ্ট শর্ত যতক্ষণ সত্য থাকে ততক্ষণ পর্যন্ত লুপটি চালিয়ে যায়। `for` লুপ সাধারণত তিনটি অংশ নিয়ে তৈরি হয়: 

1. **initialization (আরম্ভ)** - এখানে একটি ভ্যারিয়েবল সেট করা হয় যা লুপ কতবার চলবে তা নির্ধারণ করতে সহায়ক।
2. **condition (শর্ত)** - লুপটি কতক্ষণ চলবে তার শর্ত উল্লেখ করা হয়।
3. **iteration (পুনরাবৃত্তি)** - প্রতিবার লুপ চলার পর কীভাবে ভ্যারিয়েবলের মান পরিবর্তন হবে তা নির্ধারণ করা হয়।

### উদাহরণ
```javascript
for (let i = 0; i < 5; i++) {
    console.log("Number: " + i);
}
```

### কোড বিশ্লেষণ:
- **initialization:** `let i = 0;` এখানে `i` ভ্যারিয়েবলের মান 0 সেট করা হয়েছে।
- **condition:** `i < 5;` এটি শর্ত দেয় যে যতক্ষণ `i` 5 এর কম থাকবে, লুপটি চলবে।
- **iteration:** `i++` দ্বারা প্রতিবার লুপ চলার পর `i` এর মান 1 করে বৃদ্ধি পাবে।

### আউটপুট:
```
Number: 0
Number: 1
Number: 2
Number: 3
Number: 4
```

এই উদাহরণে, লুপটি ৫ বার চলবে, কারণ `i` 0 থেকে শুরু হয়ে ৫ এর কম পর্যন্ত চলবে। */

/*  ****************
// 2. While loop 
****************** */

/* **While লুপ** একটি শর্ত সত্য থাকা পর্যন্ত নির্দিষ্ট কোড বারবার চালায়। এটি `for` লুপের মতোই কাজ করে তবে সাধারণত অজানা পুনরাবৃত্তির জন্য ব্যবহৃত হয়।

### সিনট্যাক্স
```javascript
while (condition) {
    // কোড ব্লক
}
```

### উদাহরণ
```javascript
let i = 0;
while (i < 5) {
    console.log("Number: " + i);
    i++;
}
```

### কোড বিশ্লেষণ:
- **condition (শর্ত):** `(i < 5)` শর্তটি দেয় যে যতক্ষণ `i` 5 এর কম থাকবে, লুপটি চলতে থাকবে।
- **i++;** প্রতিবার লুপ চালানোর পরে `i` এর মান 1 করে বৃদ্ধি পায়।

### আউটপুট:
```
Number: 0
Number: 1
Number: 2
Number: 3
Number: 4
```

এখানে `while` লুপটি ৫ বার চলেছে কারণ `i` 0 থেকে শুরু হয়ে প্রতি লুপে এক করে বাড়ছে যতক্ষণ না তা ৫ এর সমান বা বড় হয়। */


/*  ****************
// 3. Do while loop 
****************** */

/* **Do...While লুপ** একটি লুপিং স্ট্রাকচার যেখানে প্রথমে কোডটি একবার চালানো হয়, তারপরে শর্তটি যাচাই করা হয়। যদি শর্তটি সত্য হয়, তবে কোডটি পুনরাবৃত্তি হবে; যদি মিথ্যা হয়, তবে লুপটি বন্ধ হবে। এটি এমন ক্ষেত্রে কার্যকর যেখানে কমপক্ষে একবার কোডটি চালাতে হবে।

### সিনট্যাক্স
```javascript
do {
    // কোড ব্লক
} while (condition);
```

### উদাহরণ
```javascript
let i = 0;
do {
    console.log("Number: " + i);
    i++;
} while (i < 5);
```

### কোড বিশ্লেষণ
- প্রথমে **do** ব্লকে থাকা কোডটি চালানো হয়।
- তারপর `i < 5` শর্তটি যাচাই করা হয়। যতক্ষণ এটি সত্য থাকে, লুপটি চালু থাকবে।
- **i++** প্রতি লুপ শেষে `i` এর মান এক করে বাড়ায়।

### আউটপুট
```
Number: 0
Number: 1
Number: 2
Number: 3
Number: 4
```

এখানে, **do...while** লুপটি প্রথমে `Number: 0` প্রিন্ট করে তারপর শর্তটি যাচাই করে। যদি শর্তটি সত্য থাকে তবে লুপটি আবার চালু হয়। */


/*  ****************
// 4. For of  loop 
****************** */

/* **For...of লুপ** JavaScript এ একটি লুপ যা *iterable* (যেমন `Array`, `String`, বা `Map` ইত্যাদি) এর প্রতিটি উপাদান এর উপর দিয়ে সহজে চলতে ব্যবহৃত হয়। এটি বিশেষ করে যখন একটি অ্যারে বা অন্য iterable এর প্রতিটি উপাদান এর মান অ্যাক্সেস করতে চাই, তখন খুবই উপযোগী।

### সিনট্যাক্স
```javascript
for (variable of iterable) {
    // কোড ব্লক
}
```

### উদাহরণ
```javascript
const numbers = [10, 20, 30, 40];

for (let number of numbers) {
    console.log(number);
}
```

### কোড বিশ্লেষণ
- **numbers** একটি অ্যারে যা `10, 20, 30, 40` উপাদানগুলো ধারণ করে।
- **for...of** লুপটি **numbers** এর প্রতিটি উপাদান এর উপর দিয়ে চলে এবং `number` ভেরিয়েবলে প্রতিটি উপাদানের মান প্রদান করে।
- **console.log(number)** প্রতিটি উপাদানের মান কনসোলে প্রিন্ট করে।

### আউটপুট
```
10
20
30
40
```

### আরেকটি উদাহরণ: স্ট্রিং-এর উপর For...of লুপ
```javascript
const name = "JavaScript";

for (let char of name) {
    console.log(char);
}
```

### আউটপুট
```
J
a
v
a
S
c
r
i
p
t
```

এই উদাহরণে, `for...of` লুপটি `name` স্ট্রিংয়ের প্রতিটি অক্ষর এর উপর দিয়ে চলে এবং প্রতিটি অক্ষর আলাদা করে প্রিন্ট করে। */


/*  ****************
// 5. for in  loop 
****************** */

/* **For...in লুপ** JavaScript এ একটি লুপ যা অবজেক্টের মধ্যে প্রপার্টি বা অ্যারের ইনডেক্সের উপর দিয়ে চলে। এটি অবজেক্টের প্রপার্টি নাম (কী) অ্যাক্সেস করতে এবং প্রক্রিয়াকরণ করতে ব্যবহৃত হয়।

### সিনট্যাক্স
```javascript
for (variable in object) {
    // কোড ব্লক
}
```

### উদাহরণ: অবজেক্টের উপর For...in লুপ
```javascript
const person = {
    name: "John",
    age: 30,
    city: "New York"
};

for (let key in person) {
    console.log(key + ": " + person[key]);
}
```

### কোড বিশ্লেষণ
- **person** একটি অবজেক্ট যা `name`, `age`, এবং `city` প্রপার্টি ধারণ করে।
- **for...in** লুপটি **person** অবজেক্টের প্রতিটি প্রপার্টির নাম (কী) `key` ভেরিয়েবলে সংরক্ষণ করে।
- **console.log(key + ": " + person[key])** লুপের ভিতরে, এটি প্রপার্টির নাম এবং মান কনসোলে প্রিন্ট করে।

### আউটপুট
```
name: John
age: 30
city: New York
```

### উদাহরণ: অ্যারের উপর For...in লুপ
```javascript
const colors = ["red", "green", "blue"];

for (let index in colors) {
    console.log(index + ": " + colors[index]);
}
```

### আউটপুট
```
0: red
1: green
2: blue
```

### লক্ষ্যণীয় বিষয়
- `for...in` লুপটি সাধারণত অবজেক্টের প্রপার্টির উপর কাজ করার জন্য ব্যবহৃত হয়।
- যদিও এটি অ্যারের উপরও কাজ করতে পারে, অ্যারে সাধারণত `for...of` লুপের মাধ্যমে বেশি কার্যকরভাবে প্রক্রিয়াকৃত হয়, কারণ `for...of` কেবলমাত্র মানগুলি প্রাপ্ত করে, যখন `for...in` ইনডেক্স প্রদান করে। */