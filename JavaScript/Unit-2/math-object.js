// 1. Math.PI()
/* `Math.PI` হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন প্রপার্টি, যা পাই (π) এর মান প্রদান করে। পাই হলো একটি গুরুত্বপূর্ণ গণিতীয় ধ্রুবক, যার মান আনুমানিক ৩.১৪১৫৯। পাই (π) বৃত্তের পরিধি এবং ব্যাসের অনুপাত, যা গণিত এবং জ্যামিতিতে বিভিন্ন ক্ষেত্রে ব্যবহৃত হয়।

### `Math.PI` এর ব্যবহার:
জাভাস্ক্রিপ্টে `Math.PI` এর মাধ্যমে পাই-এর মান সরাসরি পাওয়া যায়। এটি সাধারণত বৃত্ত বা গোলক সম্পর্কিত হিসাব-নিকাশে ব্যবহৃত হয়, যেমন পরিধি, ক্ষেত্রফল, ইত্যাদি বের করতে।

### উদাহরণ:
নিচে একটি উদাহরণ দেওয়া হলো যেখানে `Math.PI` ব্যবহার করে বৃত্তের পরিধি নির্ণয় করা হয়েছে:

```javascript
const radius = 5;
const circumference = 2 * Math.PI * radius;

console.log("বৃত্তের পরিধি: " + circumference);
```

এখানে, `Math.PI` এর মান ব্যবহার করে বৃত্তের পরিধি নির্ণয় করা হয়েছে। */


// ****************************************************
// 2. Matha.E()
// ****************************************************
/*
`Math.E` হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন প্রপার্টি, যা প্রাকৃতিক লগারিদমের ভিত্তি হিসেবে ব্যবহৃত ধ্রুবক **e** এর মান প্রদান করে। এটি একটি অপরিবর্তনীয় সংখ্যা, যার মান প্রায় **2.718**। গণিত এবং বিশেষ করে এক্সপোনেনশিয়াল এবং লগারিদমিক হিসাব-নিকাশে **e** একটি গুরুত্বপূর্ণ সংখ্যা।

### `Math.E` এর মান:
`Math.E` এর মান প্রায় ২.৭১৮২৮১৮২৮৪৫৯। এই মানটি গাণিতিকভাবে অপরিবর্তনীয় এবং সরাসরি গণনার জন্য ব্যবহৃত হয়।

### `Math.E` এর ব্যবহার:
গণিতের অনেক ক্ষেত্রে, বিশেষ করে এক্সপোনেনশিয়াল বৃদ্ধি বা ক্ষয় সংক্রান্ত হিসাব-নিকাশে `Math.E` ব্যবহৃত হয়। `Math.exp()` এবং `Math.log()` এর মতো মেথডগুলোতে `Math.E` কাজে লাগে। উদাহরণস্বরূপ, `Math.exp(x)` আসলে `e^x` অর্থাৎ e এর x ঘাত নির্দেশ করে।

### উদাহরণ ১: e এর ঘাত নির্ণয়

```javascript
const x = 2;
const result = Math.exp(x);

console.log("e এর " + x + " ঘাত: " + result);
// আউটপুট: e এর 2 ঘাত: 7.38905609893065
```

এখানে `Math.exp(x)` আসলে `e^x` নির্দেশ করছে, যেখানে x এর মান ২।

### উদাহরণ ২: প্রাকৃতিক লগারিদমের ভিত্তি

একটি সংখ্যার প্রাকৃতিক লগারিদম বের করতে `Math.log()` ফাংশন ব্যবহার করা হয়, যা **Math.E** এর ভিত্তিতে কাজ করে:

```javascript
const y = Math.E;
const logResult = Math.log(y);

console.log("প্রাকৃতিক লগারিদম (e এর ভিত্তিতে): " + logResult);
// আউটপুট: প্রাকৃতিক লগারিদম (e এর ভিত্তিতে): 1
```

### উপসংহার
`Math.E` জাভাস্ক্রিপ্টের একটি ধ্রুবক যা **e** এর মান নির্দেশ করে। এটি এক্সপোনেনশিয়াল এবং লগারিদমিক হিসাবের জন্য ব্যবহৃত হয় এবং গণিতের বিভিন্ন ক্ষেত্রে এটি অত্যন্ত গুরুত্বপূর্ণ।
*/


// ****************************************************
// 3. Math.abs()
// ****************************************************
/*
`Math.abs()` হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন মেথড, যা কোনো সংখ্যার **পরম মান** (absolute value) প্রদান করে। অর্থাৎ, যে কোনো সংখ্যাকে পজিটিভ মানে রূপান্তর করে। যদি সংখ্যা ইতিবাচক (positive) হয়, এটি সেই সংখ্যাটিই রিটার্ন করে; আর যদি নেতিবাচক (negative) হয়, এটি সংখ্যা থেকে ঋণাত্মক চিহ্ন সরিয়ে শুধু পরম মান রিটার্ন করে।

### সিনট্যাক্স
```javascript
Math.abs(x)
```
এখানে `x` হলো সেই সংখ্যা, যার পরম মান বের করতে চাই।

### উদাহরণসমূহ

#### উদাহরণ ১: পজিটিভ সংখ্যার জন্য
```javascript
console.log(Math.abs(5));
// আউটপুট: 5
```
এখানে `Math.abs(5)` পজিটিভ ৫ রিটার্ন করেছে, কারণ এটি নিজেই ইতিবাচক।

#### উদাহরণ ২: নেগেটিভ সংখ্যার জন্য
```javascript
console.log(Math.abs(-5));
// আউটপুট: 5
```
এখানে `Math.abs(-5)` ঋণাত্মক চিহ্ন সরিয়ে ৫ রিটার্ন করেছে।

#### উদাহরণ ৩: শূন্যের জন্য
```javascript
console.log(Math.abs(0));
// আউটপুট: 0
```
শূন্যের কোনো পরম মান নেই, তাই `Math.abs(0)` সরাসরি ০ রিটার্ন করে।

#### উদাহরণ ৪: ভগ্নাংশের জন্য
```javascript
console.log(Math.abs(-3.7));
// আউটপুট: 3.7
```
এখানে `Math.abs(-3.7)` ভগ্নাংশের ঋণাত্মক চিহ্ন সরিয়ে ৩.৭ রিটার্ন করেছে।

### ব্যবহারের ক্ষেত্র
1. **দূরত্ব হিসাব**: দুটি সংখ্যার মধ্যে পার্থক্যের পরম মান বের করতে, যাতে দূরত্ব সবসময় পজিটিভ থাকে।
2. **গণনায় সঠিকতা আনতে**: কোনো মানের উপর অপারেশন করার আগে তার পরম মান ব্যবহার করা, যাতে নেতিবাচক মান সমস্যার সৃষ্টি না করে।

`Math.abs()` ব্যবহারের মাধ্যমে যেকোনো মানকে পরম করে গণনা আরো নির্ভুলভাবে করা যায়। */


// ****************************************************
// 4. Math.floor()
// ****************************************************
/*
`Math.floor()` হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন মেথড, যা কোনো দশমিক সংখ্যাকে তার **নিকটতম পূর্ণসংখ্যার দিকে নিম্নমুখী করে** বা নিচের দিকে গোলাকার করে। অর্থাৎ, এটি সংখ্যার দশমিক অংশ বাদ দিয়ে কেবলমাত্র পূর্ণসংখ্যা রিটার্ন করে।

### সিনট্যাক্স
```javascript
Math.floor(x)
```
এখানে `x` হলো সেই দশমিক সংখ্যা, যেটিকে নিম্নমুখী করে পূর্ণসংখ্যা করতে চাই।

### উদাহরণসমূহ

#### উদাহরণ ১: পজিটিভ দশমিক সংখ্যার জন্য
```javascript
console.log(Math.floor(5.9));
// আউটপুট: 5
```
এখানে `Math.floor(5.9)` দশমিক অংশ বাদ দিয়ে ৫ রিটার্ন করেছে।

#### উদাহরণ ২: নেগেটিভ দশমিক সংখ্যার জন্য
```javascript
console.log(Math.floor(-5.9));
// আউটপুট: -6
```
এখানে `Math.floor(-5.9)` নিম্নমুখী করে -৬ রিটার্ন করেছে, কারণ এটি দশমিক অংশ বাদ দিয়ে পরবর্তী নিম্নতর পূর্ণসংখ্যার দিকে নেয়।

#### উদাহরণ ৩: পূর্ণসংখ্যার জন্য
```javascript
console.log(Math.floor(8));
// আউটপুট: 8
```
যেহেতু ৮ ইতোমধ্যেই পূর্ণসংখ্যা, তাই `Math.floor(8)` সরাসরি ৮ রিটার্ন করেছে।

### ব্যবহারের ক্ষেত্র
1. **অবশিষ্টাংশ বাদ দেয়া**: যেকোনো ভগ্নাংশ বা দশমিক অংশ বাদ দিয়ে কেবলমাত্র পূর্ণ সংখ্যা পেতে।
2. **ইনডেক্স বা অঙ্ক নির্ধারণে**: যখন কোনো ভগ্নাংশকে সম্পূর্ণ সংখ্যা হিসেবে গণনা করার প্রয়োজন হয়, যেমন লুপের ইনডেক্সিংয়ে বা এলোমেলো ইনডেক্স তৈরি করতে।

`Math.floor()` ব্যবহারের মাধ্যমে সহজেই দশমিক অংশ বাদ দেয়া যায় এবং পূর্ণসংখ্যার নিম্নতম মান নির্ধারণ করা সম্ভব।
*/

// ****************************************************
// 5. Math.ceil()
// ****************************************************
/*
`Math.ceil()` হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন মেথড, যা কোনো দশমিক সংখ্যাকে তার **নিকটতম পূর্ণসংখ্যার দিকে উপরের দিকে গোলাকার করে**। অর্থাৎ, দশমিক সংখ্যাকে পরবর্তী পূর্ণসংখ্যায় উন্নীত করে রিটার্ন করে।

### সিনট্যাক্স
```javascript
Math.ceil(x)
```
এখানে `x` হলো সেই দশমিক সংখ্যা, যেটিকে উপরের দিকে পূর্ণসংখ্যায় উন্নীত করতে চাই।

### উদাহরণসমূহ

#### উদাহরণ ১: পজিটিভ দশমিক সংখ্যার জন্য
```javascript
console.log(Math.ceil(5.3));
// আউটপুট: 6
```
এখানে `Math.ceil(5.3)` দশমিক অংশ বাদ দিয়ে পরবর্তী পূর্ণসংখ্যা ৬ রিটার্ন করেছে।

#### উদাহরণ ২: নেগেটিভ দশমিক সংখ্যার জন্য
```javascript
console.log(Math.ceil(-5.3));
// আউটপুট: -5
```
এখানে `Math.ceil(-5.3)` সংখ্যাটিকে পরবর্তী পূর্ণসংখ্যায় উন্নীত করে -৫ রিটার্ন করেছে।

#### উদাহরণ ৩: পূর্ণসংখ্যার জন্য
```javascript
console.log(Math.ceil(7));
// আউটপুট: 7
```
যেহেতু ৭ ইতোমধ্যেই পূর্ণসংখ্যা, তাই `Math.ceil(7)` সরাসরি ৭ রিটার্ন করেছে।

### ব্যবহারের ক্ষেত্র
1. **উপরের দিকের গোলাকারকরণ**: যখন সংখ্যার দশমিক অংশ থাকলে তাকে উপরের দিকে পরবর্তী পূর্ণসংখ্যায় উন্নীত করার প্রয়োজন হয়।
2. **সংখ্যার উন্নীত সীমা নির্ধারণ**: যেমন, আসন সংখ্যা বা গুণফলের ক্ষেত্রে যেখানে দশমিক বাদ দিয়ে পরবর্তী সম্পূর্ণ সংখ্যায় উন্নীত করা প্রয়োজন হতে পারে।

`Math.ceil()` ব্যবহারের মাধ্যমে সহজেই দশমিক সংখ্যাগুলোকে উন্নীত করে পরবর্তী পূর্ণসংখ্যায় নিয়ে যাওয়া সম্ভব।
*/

// ****************************************************
// 6. Math.round()
// ****************************************************
/* `Math.round()` হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন মেথড, যা একটি দশমিক সংখ্যাকে নিকটতম পূর্ণসংখ্যায় **গোলাকার করে**। অর্থাৎ, যদি দশমিক অংশটি ০.৫ বা তার বেশি হয়, এটি সংখ্যাটিকে উপরের দিকে এবং ০.৫ এর কম হলে নিচের দিকে গোলাকার করে।

### সিনট্যাক্স
```javascript
Math.round(x)
```
এখানে `x` হলো সেই সংখ্যা, যেটিকে নিকটতম পূর্ণসংখ্যায় গোলাকার করতে চাই।

### উদাহরণসমূহ

#### উদাহরণ ১: দশমিক অংশ ০.৫ বা তার বেশি হলে
```javascript
console.log(Math.round(5.6));
// আউটপুট: 6
```
এখানে `Math.round(5.6)` দশমিক অংশ ০.৫ এর বেশি হওয়ায় উপরের দিকে গোলাকার করে ৬ রিটার্ন করেছে।

#### উদাহরণ ২: দশমিক অংশ ০.৫ এর কম হলে
```javascript
console.log(Math.round(5.3));
// আউটপুট: 5
```
এখানে `Math.round(5.3)` দশমিক অংশ ০.৫ এর কম হওয়ায় নিচের দিকে গোলাকার করে ৫ রিটার্ন করেছে।

#### উদাহরণ ৩: দশমিক অংশ ঠিক ০.৫ হলে
```javascript
console.log(Math.round(4.5));
// আউটপুট: 5
```
এখানে `Math.round(4.5)` দশমিক অংশ ঠিক ০.৫ হওয়ায় উপরের দিকে গোলাকার করে ৫ রিটার্ন করেছে।

#### উদাহরণ ৪: নেতিবাচক সংখ্যার জন্য
```javascript
console.log(Math.round(-5.5));
// আউটপুট: -5
```
এখানে `Math.round(-5.5)` উপরের দিকে উন্নীত করে -৫ রিটার্ন করেছে।

### ব্যবহারের ক্ষেত্র
1. **গোলাকার মান প্রয়োজন হলে**: যেমন, মুদ্রার মান, পরিমাপ বা অনুমান যেখানে দশমিক পরিমাণ বাদ দেয়া প্রয়োজন।
2. **গাণিতিক হিসাব সহজ করতে**: গণনা বা ইনডেক্স নির্ধারণে যখন দশমিক মান বাদ দিয়ে পূর্ণসংখ্যায় গোলাকার দরকার হয়।

`Math.round()` ব্যবহারের মাধ্যমে সহজেই দশমিক সংখ্যাকে নিকটতম পূর্ণসংখ্যায় পরিণত করা যায়। */

// ****************************************************
// 7.Math.random()
// ****************************************************
/* `Math.random()` জাভাস্ক্রিপ্টের একটি বিল্ট-ইন মেথড, যা **০ এবং ১ এর মধ্যে একটি এলোমেলো দশমিক সংখ্যা** প্রদান করে। এটি সাধারণত রেন্ডম নম্বর জেনারেট করতে ব্যবহৃত হয় এবং রিটার্নকৃত সংখ্যা সর্বদা ০ (ইনক্লুসিভ) এবং ১ (এক্সক্লুসিভ) এর মধ্যে থাকে।

### সিনট্যাক্স
```javascript
Math.random()
```

### উদাহরণসমূহ

#### উদাহরণ ১: ০ থেকে ১ এর মধ্যে এলোমেলো সংখ্যা
```javascript
console.log(Math.random());
// আউটপুট হতে পারে: 0.3456782 (অথবা অন্য যেকোনো সংখ্যা ০ থেকে ১ এর মধ্যে)
```
এখানে `Math.random()` সরাসরি ০ এবং ১ এর মধ্যে একটি দশমিক সংখ্যা রিটার্ন করেছে।

#### উদাহরণ ২: ০ থেকে ১০ এর মধ্যে এলোমেলো পূর্ণসংখ্যা
```javascript
console.log(Math.floor(Math.random() * 10));
// আউটপুট হতে পারে: 0, 1, 2, ..., 9
```
এখানে `Math.random()` এর সাথে `Math.floor()` ব্যবহার করে ০ থেকে ৯ এর মধ্যে একটি এলোমেলো পূর্ণসংখ্যা রিটার্ন করা হয়েছে।

#### উদাহরণ ৩: একটি নির্দিষ্ট রেঞ্জে এলোমেলো সংখ্যা (যেমন ১ থেকে ১০)
```javascript
console.log(Math.floor(Math.random() * 10) + 1);
// আউটপুট হতে পারে: 1, 2, ..., 10
```
এখানে `Math.random()` এর সাথে `Math.floor()` ব্যবহার করে ১ থেকে ১০ এর মধ্যে একটি এলোমেলো পূর্ণসংখ্যা রিটার্ন করা হয়েছে।

#### উদাহরণ ৪: একটি নির্দিষ্ট রেঞ্জে ভাসমান সংখ্যা (যেমন ৫ থেকে ১৫ এর মধ্যে)
```javascript
console.log(Math.random() * (15 - 5) + 5);
// আউটপুট হতে পারে: 5.0 থেকে 15.0 এর মধ্যে যেকোনো ভাসমান সংখ্যা
```
এখানে `(15 - 5)` দিয়ে গুণ করে এবং +5 যোগ করে ৫ থেকে ১৫ এর মধ্যে একটি এলোমেলো দশমিক সংখ্যা তৈরি করা হয়েছে।

### ব্যবহারের ক্ষেত্র
1. **গেম ডেভেলপমেন্টে**: এলোমেলো ইভেন্ট বা চরিত্রের অবস্থান নির্ধারণে।
2. **সিমুলেশন**: এলোমেলো ঘটনা মডেল করতে।
3. **লটারির নম্বর তৈরি**: বিভিন্ন অনলাইন টুলে লটারির নম্বর বা এলোমেলো ইভেন্ট নির্ধারণে।

`Math.random()` ব্যবহার করে সহজেই এলোমেলো সংখ্যা তৈরি করা যায়, যা অনেক প্রোগ্রামিং কাজে দরকারী। */

// ****************************************************
// 8. Math.pow()
// ****************************************************
/* `Math.pow()` হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন মেথড, যা একটি সংখ্যা বা বেসকে নির্দিষ্ট পাওয়ার বা ঘাতে উন্নীত করে। এটি একটি সংখ্যা এবং তার ঘাত বা শক্তি নিয়ে কাজ করে এবং রিটার্ন করে সেই সংখ্যার ঘাতফল।

### সিনট্যাক্স
```javascript
Math.pow(base, exponent)
```
এখানে:
- `base`: ঘাত করার জন্য মূল সংখ্যা (বেস)
- `exponent`: সেই বেসের ঘাত বা পাওয়ার

### উদাহরণসমূহ

#### উদাহরণ ১: সাধারণ ঘাতফল
```javascript
console.log(Math.pow(2, 3));
// আউটপুট: 8
```
এখানে `Math.pow(2, 3)` দ্বারা ২ এর ৩ ঘাত (২^৩) অর্থাৎ ৮ রিটার্ন করেছে।

#### উদাহরণ ২: শূন্য ঘাত
```javascript
console.log(Math.pow(5, 0));
// আউটপুট: 1
```
যেকোনো সংখ্যার ০ তম ঘাত ১ হয়, তাই `Math.pow(5, 0)` এর আউটপুট ১।

#### উদাহরণ ৩: নেতিবাচক ঘাত
```javascript
console.log(Math.pow(4, -2));
// আউটপুট: 0.0625
```
এখানে `Math.pow(4, -2)` দ্বারা ৪ এর -২ ঘাত (১/৪^২) অর্থাৎ ০.০৬২৫ রিটার্ন করেছে।

#### উদাহরণ ৪: দশমিক ঘাত
```javascript
console.log(Math.pow(9, 0.5));
// আউটপুট: 3
```
এখানে `Math.pow(9, 0.5)` ৯ এর ০.৫ ঘাত বা বর্গমূল হিসেব করেছে, যা ৩।

### ব্যবহারের ক্ষেত্র
1. **গাণিতিক হিসাব-নিকাশ**: বিশেষ করে, গণিত বা পরিসংখ্যানের ক্ষেত্রে বড় সংখ্যার শক্তি বের করতে।
2. **বিজ্ঞান এবং ইঞ্জিনিয়ারিং**: বিভিন্ন গাণিতিক মডেল বা সিমুলেশনে ঘাতফল হিসাব করতে।

`Math.pow()` ব্যবহার করে সহজেই একটি সংখ্যাকে তার নির্দিষ্ট ঘাতে উন্নীত করে হিসাব করা যায়। */

// ****************************************************
// 9. Math.sqrt()
// ****************************************************
/* `Math.sqrt()` হলো জাভাস্ক্রিপ্টের একটি বিল্ট-ইন মেথড, যা একটি সংখ্যা বা ভেরিয়েবলের **বর্গমূল** বের করে। এটি শুধুমাত্র একটি প্যারামিটার গ্রহণ করে এবং সেই সংখ্যার বর্গমূল রিটার্ন করে।

### সিনট্যাক্স
```javascript
Math.sqrt(x)
```
এখানে `x` হলো সেই সংখ্যা, যার বর্গমূল বের করতে চাই।

### উদাহরণসমূহ

#### উদাহরণ ১: ইতিবাচক সংখ্যা
```javascript
console.log(Math.sqrt(25)); 
// আউটপুট: 5
```
এখানে `Math.sqrt(25)` দ্বারা ২৫ এর বর্গমূল ৫ রিটার্ন করেছে।

#### উদাহরণ ২: ভগ্নাংশ
```javascript
console.log(Math.sqrt(0.25)); 
// আউটপুট: 0.5
```
এখানে `Math.sqrt(0.25)` ০.২৫ এর বর্গমূল বের করেছে, যা ০.৫।

#### উদাহরণ ৩: দশমিক সংখ্যা
```javascript
console.log(Math.sqrt(10)); 
// আউটপুট: 3.1622776601683795
```
এখানে `Math.sqrt(10)` ১০ এর বর্গমূল বের করে যা একটি দশমিক সংখ্যা।

#### উদাহরণ ৪: নেতিবাচক সংখ্যা
```javascript
console.log(Math.sqrt(-9)); 
// আউটপুট: NaN
```
নেতিবাচক সংখ্যার জন্য বর্গমূল বের করতে গেলে `Math.sqrt(-9)` `NaN` (Not a Number) রিটার্ন করে, কারণ বাস্তবে নেতিবাচক সংখ্যার কোন বাস্তব বর্গমূল নেই।

### ব্যবহারের ক্ষেত্র
1. **গণিত এবং পরিসংখ্যান**: বিভিন্ন গাণিতিক এবং পরিসংখ্যানগত বিশ্লেষণে ব্যবহার করা হয়।
2. **বিজ্ঞান**: বিশেষ করে ফিজিক্সে এবং প্রকৌশলে বিভিন্ন গণনা এবং মডেল তৈরি করতে।
3. **জ্যামিতি**: ত্রিভুজ, বর্গ, এবং অন্যান্য জ্যামিতিক আকৃতির ক্ষেত্রফল এবং পরিধি নির্ধারণ করতে।

`Math.sqrt()` ব্যবহারের মাধ্যমে সহজেই কোনো সংখ্যার বর্গমূল নির্ধারণ করা যায়, যা গাণিতিক হিসাবের জন্য খুবই কার্যকর। */